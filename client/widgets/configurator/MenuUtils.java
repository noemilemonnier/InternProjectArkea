package com.arkea.com.arkea.commons.archetypes.client.widgets.configurator;

import com.arkea.commons.ihm.client.widgets.menu.MenuConstants;
import com.arkea.commons.ihm.client.model.KeyValueModel;
import com.arkea.methodes.gxt3.theme.arkea.client.panel.ArkeaAccordionContentPanelAppearance;
import com.google.gwt.core.client.GWT;
import com.google.gwt.i18n.client.LocalizableResource.DefaultLocale;
import com.google.gwt.i18n.client.Messages;
import com.sencha.gxt.core.client.Style.SelectionMode;
import com.sencha.gxt.core.client.ValueProvider;
import com.sencha.gxt.data.shared.ModelKeyProvider;
import com.sencha.gxt.data.shared.TreeStore;
import com.sencha.gxt.widget.core.client.ContentPanel;
import com.sencha.gxt.widget.core.client.container.AccordionLayoutContainer;
import com.sencha.gxt.widget.core.client.container.AccordionLayoutContainer.ExpandMode;
import com.sencha.gxt.widget.core.client.tree.Tree;

public class MenuUtils {

    /**
     * Interface des libellés de menu
     * 
     * @author generated by Archetype
     * 
     */
    @DefaultLocale("fr")
    public interface MenuUtilsConstantes extends Messages {

	@DefaultMessage("Accueil")
	String accueil();

	@DefaultMessage("General")
	String general();

    }

    public final static MenuUtilsConstantes MENUS = GWT.create(MenuUtilsConstantes.class);
    
    private static AccordionLayoutContainer menuContainer;

    private MenuUtils() {

    }

    /**
     * Recuperation du menu à implémenter dans l'application
     * 
     * @return
     */
    public final static AccordionLayoutContainer getMenu() {
	
	//creation et ajout du menu
	menuContainer = new AccordionLayoutContainer();
	menuContainer.setExpandMode(ExpandMode.SINGLE);
	menuContainer.setBorders(true);
	menuContainer.setDeferHeight(true);
	
	menuContainer.add(createMenuAcceuil());

	return menuContainer;
    }

    /***
     * Creation du menu d'acceuil
     * 
     * @return
     */
    private static ContentPanel createMenuAcceuil() {

	// creation d'un store
	TreeStore<KeyValueModel> store = getStore();
	// creation de l'arbre
	Tree<KeyValueModel, String> tree = createTree(store);
	//Récupération du contenePanel "General"
	ContentPanel cp = getContentPanel(MENUS.general());

	// ajout d'un noeud dans l'arbre
	// l'ID doit être unique pour l'ensemble de l'arbre
	KeyValueModel node1 = new KeyValueModel("acceuilRootNode");
	// MenuConstants.TREE_ITEM_NAME correspond au nom affiché dans l'arbre
	node1.setParameter(MenuConstants.TREE_ITEM_NAME, MENUS.accueil());
	// MenuConstants.TREE_ITEM_NAME correspond à l'url associé au workbench à utiliser
	node1.setParameter(MenuConstants.TREE_ITEM_URL, NavigationUtils.URLACCUEILWB);
	//stockage dans le store.
	store.add(node1);
	
	cp.add(tree);
	
	return cp;

    }

    private static ContentPanel getContentPanel(final String contentPanelName) {

	ArkeaAccordionContentPanelAppearance appareance = GWT.create(ArkeaAccordionContentPanelAppearance.class);

	ContentPanel cp = new ContentPanel(appareance);
	cp.setBodyBorder(false);
	cp.setHeadingText(contentPanelName);

	return cp;
    }
    
    private static TreeStore<KeyValueModel> getStore() {
	TreeStore<KeyValueModel> store = new TreeStore<KeyValueModel>(new ModelKeyProvider<KeyValueModel>() {

	    
	    public String getKey(KeyValueModel item) {
		return item.getId().toString();
	    }
	});

	return store;
    }

    private static Tree<KeyValueModel, String> createTree(TreeStore<KeyValueModel> store) {

	final Tree<KeyValueModel, String> tree = new Tree<KeyValueModel, String>(store, new ValueProvider<KeyValueModel, String>() {

	    
	    public String getValue(KeyValueModel object) {
		return object.getParameter(MenuConstants.TREE_ITEM_NAME).toString();
	    }

	    
	    public void setValue(KeyValueModel object, String value) {
	    }

	   
	    public String getPath() {
		return "name";
	    }
	});

	tree.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);

	return tree;
    }

}
